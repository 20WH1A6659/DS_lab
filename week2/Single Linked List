#include<stdio.h>
#include<stdlib.h>
struct node{
        int data;
        struct node *link;
};
struct node *head =NULL,*cur,*temp,*temp1;
struct node *create(){
       int n;
       printf("Enter no of nodes");
       scanf("%d",&n);
while(n--)
cur = (struct node*)malloc(sizeof (struct node));
       scanf("%d",&(cur->data));
       cur->link = NULL;

  if(head == NULL)
       head = cur;
  else
      temp=head;
      while(temp->link != NULL)
           temp = temp->link;
      temp->link = cur;
  return head;
 }
struct node *insert_begin(int ele){
        cur->data = ele;
        cur->link = head;
        cur = head;
return head;
}
struct node *insert_end(int ele){
       temp = head;
       temp1 = head;
       while(temp != NULL)
           temp1 =temp;
           temp = temp->link;
       cur->data = ele;
       temp->link =cur;
       cur->link = NULL;
return head;
}
struct node *insert_pos(int ele,int pos){
       int c=1;
       temp = head;
       while(c<pos-1)
          temp = temp->link;
       cur->link =temp->link;
       temp->link =cur;
return head;
}
struct node *delete_begin(struct node *head){
       temp = head;
       temp->link =head;
       printf("deleted element is %d",temp->data);
       free(temp);
return head;
}
struct node *delete_end(struct node *head){
      temp = head;
      temp1 = temp;
      while(temp != NULL)
           temp1 = temp;
           temp = temp->link;
      printf("deleted element is %d",temp->data);
      free(temp);
      temp1 ->link = NULL;
return head;
}
struct node *delete_pos(int pos){
            int c;
            c=1;
            temp =head;
            while(c<pos)
               temp = temp->link;
            printf("deleted element is %d",temp->data);
            free(temp);
return head;
}
void display(struct node *head){
    temp = head;
    while(temp!= NULL){
        printf("%d",temp->data);
        temp = temp->link;
    }
}
void reversedisplay(struct node *head){
    if(head!= NULL){
            reversedisplay(head->link);
            printf("%d",head->data);
    }
}
int search(struct node*head,int key){
    int c=1;
    temp = head;
    while(temp!=NULL){
        if(key == temp->data)
            return c;
        temp = temp->link;
        c++;
    }
return -1;
}
struct node*sorting(struct node*head)
{
    int x;
    while(temp != NULL){
        while(temp1 != NULL){
            if(temp1 != NULL)
                x = temp1->data;
            temp1->data =temp->link->data;
            temp->link->data =x;

        }
        temp1 =temp1->link;
    }
    return head;
}
int main(){
int ch,ele,pos,key;
while(1){
   printf("1-create\n2-insert_begin\n3-insertend\n4-insertpos\n5-deletebegin\n6-deleteend\n7-deleteatpos\n8-display\n9-reversedisplay\n10-search\n11-sort\n12-exit\n");
   printf("enter any no");
   scanf("%d",&ch);
   switch(ch){
      case 1:head = create();
              break;
      case 2:scanf("%d",&ele);
             head =insert_begin(ele);
             break;
      case 3:scanf("%d",&ele);
             head =insert_end(ele);
             break;
      case 4:printf("enter position");
             scanf("%d",&pos);
             printf("enter element");
             scanf("%d",&ele);
             head =insert_pos(pos,ele);
             break;
      case 5:head = delete_begin(head);
             break;
      case 6:head = delete_end(head);
             break;
      case 7:scanf("%d",&pos);
             head =delete_pos(pos);
             break;
      case 8:display(head);
            break;
      case 9:reversedisplay(head);
            break;
      case 10:scanf("%d",&key);
             pos =search(head,key);
            if(pos ==-1)
                printf("element not found");
            else
                printf("element found at %d ",pos);
      case 11:head = sorting(head);
             break;
      case 12:exit(0);
   }
}
}
