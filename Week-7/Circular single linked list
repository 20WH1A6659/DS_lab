#include<stdio.h>
#include<stdlib.h>
struct node{
    int data;
    struct node *link;
};
struct node *head =NULL,*cur,*temp,*temp1;
struct node *create(){
    int n;
    scanf("%d",&n);
    while(n--){
        if(head == NULL){
            cur->link =cur;
            head =cur;
        }
        else{
            temp = head;
            while(temp->link != head)
                temp =temp->link;
            temp->link =cur;
            cur->link =head;
        }
    }
    return head;
}
// Insert at begin
struct node *insert_begin(int ele){
    cur =(struct node*)malloc(sizeof (struct node));
    cur->data = ele;
    temp =head;
    while(temp->link != head)
        temp =temp->link;
    temp->link =cur;
    cur->link =head;
    return head;
}

//Insert at end
struct node *insert_end(int ele){
    cur =(struct node*)malloc(sizeof(struct node));
    cur->data =ele;
    temp =head;
    while(temp->link !=head)
        temp =temp->link;
    temp->link =cur;
    cur->link =head;
    return head;
}
//Insert at position
struct node *insert_position(int pos,int ele){
    int c=1;
    cur =(struct node*)malloc(sizeof(struct node));
    cur->data =ele;
    while(c<pos){
        temp =temp->link;
        c++;
    }
    cur->link =temp->link;
    temp->link =cur;
    return head;
}
//Delete at begin
struct node *delete_begin(struct node*head){
    temp= head;
    while(temp->link != head)
        temp=temp->link;
    temp1=head;
    temp->link =temp1->link;
    head=temp1->link;
    printf("%d",temp1->data);
    free(temp1);
    return head;
}

//Delete at end
struct node*delete_end(struct node *head){
    if(head != NULL)
        if(head->link == head)
          head =NULL;
        else{
            temp =head;
            while(temp->link->link !=head)
                temp =temp->link;
            temp1 =temp->link;
            temp->link =head;
            free(temp1);
        }
}
//Delete at position
struct node*delete_position(struct node*head,int pos){
    temp =head;
    int c=1;
    while(c<pos){
        temp1=temp;
        temp=temp->link;
        c++;
    }
    temp1->link =temp->link;
    printf("deleted element is %d",temp->data);
    free(temp);
    return head;
}
void display(struct node*head){
     temp =head;
     while(temp->link != head){
        printf("%d\n",temp->data);
        temp =temp->link;
     }

int main()
{
    int ch,pos,ele;
    while(1)
        {
        printf("1-create\n2-insert_begin\n3-insert_end\n4-insert_position\n5-delete_begin\n6-delete_end\n7-delete_position\n8-display\n9-exit\n");
        printf("Enter ur choice:");
        scanf("%d",&ch);
        switch(ch)
        {
            case 1:head=create();
                   break;
            case 2:printf("Enter the element:");
                   scanf("%d",&ele);
                   head =insert_begin(ele);
                   break;
            case 3:printf("Enter the element:");
                   scanf("%d",&ele);
                   head =insert_end(ele);
                   break;
            case 4:printf("Enter the element:");
                   scanf("%d",&ele);
                   printf("Enter the position:");
                   scanf("%d",&pos);
                   head =insert_position(ele,pos);
                   break;
            case 5:head =delete_begin(head);
                   break;
            case 6:head =delete_end(head);
                   break;
            case 7:printf("Enter the position:");
                   scanf("%d",&pos);
                   head =delete_pos(head,pos);
                   break;
            case 8:display(head);
                   break;
            case 9:exit(0);

        }
        }
}
