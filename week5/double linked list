#include<stdio.h>
#include<stdlib.h>
struct node{
    int data;
    struct node *prev;
    struct node *next;
};
struct node *head=NULL,*tail=NULL,*temp,*temp1,*cur;
struct node *create()
{
    int n;
    printf("Enter no of nodes:");
    scanf("%d",&n);


    while(n--){
        cur =((struct node*)malloc(sizeof(struct node)));
        printf("enter the element:");
        scanf("%d",&(cur->data));
        cur->next = NULL;
        if(head == NULL)
            head =tail =cur;
        else{
            tail->next =cur;
            cur->prev =tail;
            tail =cur;
        }
        }
        return head;
}
struct node *insert_begin(int ele){
    cur =(struct node*)malloc(sizeof(struct node));
    cur->data=ele;
    cur->next=head;
    head->prev=cur;
    cur->prev=NULL;
    head=cur;
return head;
}
struct node *insert_end(int ele){
    cur =(struct node*)malloc(sizeof(struct node));
    cur->data=ele;
    tail->next=cur;
    cur->prev=tail;
return head;
}
struct node *insert_position(int ele,int pos){
    cur =(struct node*)malloc(sizeof(struct node));
    cur->data =ele;
    int c=1;
    temp=head;
    while(c<pos){
        temp1 =temp;
        temp = temp->next;
        c++;
    }
    //temp->next=cur;
    cur->prev =temp->prev;
    cur->next =temp1->next;
    temp1->next =cur;
    temp->prev = cur;
return head;
}
struct node *delete_begin(struct node*head){
    cur =(struct node*)malloc(sizeof(struct node));
    temp =head;
    head =head->next;
    printf("Deleted element is %d\n",(temp->data));
    free(temp);
return head;
}
struct node *delete_end(struct node*tail){
    cur =(struct node*)malloc(sizeof(struct node));
    temp =tail;
    tail =tail->prev;
    tail->next=NULL;
    printf("Deleted element is %d\n",(temp->data));
    free(temp);
return tail;
}
struct node *delete_pos(struct node *head,int pos){
    int c=1;
    temp =head;
    while(c<pos){
        temp1 =temp;
        temp=temp->next;
        c++;
    }
    temp1->next=temp->next;
    temp->next->prev =temp1;
    printf("Deleted element is %d\n",(temp->data));
    free(temp);
return head;
}
void display(struct node*head){
     temp =head;
     while(temp != NULL){
        printf("%d\n",temp->data);
        temp =temp->next;
     }
}

int main()
{
    int ch,pos,ele;
    while(1)
        {
        printf("1-create\n2-insert_begin\n3-insert_end\n4-insert_position\n5-delete_begin\n6-delete_end\n7-delete_position\n8-display\n9-exit\n");
        printf("Enter ur choice:");
        scanf("%d",&ch);
        switch(ch)
        {
            case 1:head=create();
                   break;
            case 2:printf("Enter the element:");
                   scanf("%d",&ele);
                   head =insert_begin(ele);
                   break;
            case 3:printf("Enter the element:");
                   scanf("%d",&ele);
                   head =insert_end(ele);
                   break;
            case 4:printf("Enter the element:");
                   scanf("%d",&ele);
                   printf("Enter the position:");
                   scanf("%d",&pos);
                   head =insert_position(ele,pos);
                   break;
            case 5:head =delete_begin(head);
                   break;
            case 6:tail =delete_end(tail);
                   break;
            case 7:printf("Enter the position:");
                   scanf("%d",&pos);
                   head =delete_pos(head,pos);
                   break;
            case 8:display(head);
                   break;
            case 9:exit(0);

        }
        }
}
/*OUTPUT:
1-create
2-insert_begin
3-insert_end
4-insert_position
5-delete_begin
6-delete_end
7-delete_position
8-display
9-exit
Enter ur choice:1
Enter no of nodes:3
enter the element:12
enter the element:13
enter the element:15
1-create
2-insert_begin
3-insert_end
4-insert_position
5-delete_begin
6-delete_end
7-delete_position
8-display
9-exit
Enter ur choice:8
12
13
15
1-create
2-insert_begin
3-insert_end
4-insert_position
5-delete_begin
6-delete_end
7-delete_position
8-display
9-exit
Enter ur choice:2
Enter the element:11
1-create
2-insert_begin
3-insert_end
4-insert_position
5-delete_begin
6-delete_end
7-delete_position
8-display
9-reversedisplay
10-exit
Enter ur choice:8
11
12
13
15
1-create
2-insert_begin
3-insert_end
4-insert_position
5-delete_begin
6-delete_end
7-delete_position
8-display
9-exit
Enter ur choice:3
Enter the element:16
1-create
2-insert_begin
3-insert_end
4-insert_position
5-delete_begin
6-delete_end
7-delete_position
8-display
9-exit
Enter ur choice:8
11
12
13
15
16
1-create
2-insert_begin
3-insert_end
4-insert_position
5-delete_begin
6-delete_end
7-delete_position
8-display
9-exit
Enter ur choice:4
Enter the element:14
Enter the position:4
1-create
2-insert_begin
3-insert_end
4-insert_position
5-delete_begin
6-delete_end
7-delete_position
8-display
9-exit
Enter ur choice:8
11
12
13
14
15
16
1-create
2-insert_begin
3-insert_end
4-insert_position
5-delete_begin
6-delete_end
7-delete_position
8-display
9-exit
Enter ur choice:5
Deleted element is 11
1-create
2-insert_begin
3-insert_end
4-insert_position
5-delete_begin
6-delete_end
7-delete_position
8-display
9-exit
Enter ur choice:8
12
13
14
15
16
1-create
2-insert_begin
3-insert_end
4-insert_position
5-delete_begin
6-delete_end
7-delete_position
8-display
9-exit
Enter ur choice:6
Deleted element is 16
1-create
2-insert_begin
3-insert_end
4-insert_position
5-delete_begin
6-delete_end
7-delete_position
8-display
9-exit
Enter ur choice:8
12
13
14
15
1-create
2-insert_begin
3-insert_end
4-insert_position
5-delete_begin
6-delete_end
7-delete_position
8-display
9-exit
Enter ur choice:7
Enter the position:3
Deleted element is 14
1-create
2-insert_begin
3-insert_end
4-insert_position
5-delete_begin
6-delete_end
7-delete_position
8-display
9-exit
Enter ur choice:8
12
13
15
1-create
2-insert_begin
3-insert_end
4-insert_position
5-delete_begin
6-delete_end
7-delete_position
8-display
9-exit
Enter ur choice:9

Process returned 0 (0x0)   execution time : 80.075 s
Press any key to continue.

*/
